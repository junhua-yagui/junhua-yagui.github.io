package xzy.GreebDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xzy.myrecoder.Model.RecoderItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECODER_ITEM".
*/
public class RecoderItemDao extends AbstractDao<RecoderItem, Long> {

    public static final String TABLENAME = "RECODER_ITEM";

    /**
     * Properties of entity RecoderItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ItemNum = new Property(0, Long.class, "itemNum", true, "_id");
        public final static Property ItemName = new Property(1, String.class, "itemName", false, "ITEM_NAME");
        public final static Property ItemSize = new Property(2, String.class, "itemSize", false, "ITEM_SIZE");
        public final static Property ItemLength = new Property(3, String.class, "itemLength", false, "ITEM_LENGTH");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Flag = new Property(5, boolean.class, "flag", false, "FLAG");
    }


    public RecoderItemDao(DaoConfig config) {
        super(config);
    }
    
    public RecoderItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECODER_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: itemNum
                "\"ITEM_NAME\" TEXT," + // 1: itemName
                "\"ITEM_SIZE\" TEXT," + // 2: itemSize
                "\"ITEM_LENGTH\" TEXT," + // 3: itemLength
                "\"DATE\" TEXT," + // 4: date
                "\"FLAG\" INTEGER NOT NULL );"); // 5: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECODER_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecoderItem entity) {
        stmt.clearBindings();
 
        Long itemNum = entity.getItemNum();
        if (itemNum != null) {
            stmt.bindLong(1, itemNum);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(2, itemName);
        }
 
        String itemSize = entity.getItemSize();
        if (itemSize != null) {
            stmt.bindString(3, itemSize);
        }
 
        String itemLength = entity.getItemLength();
        if (itemLength != null) {
            stmt.bindString(4, itemLength);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
        stmt.bindLong(6, entity.getFlag() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecoderItem entity) {
        stmt.clearBindings();
 
        Long itemNum = entity.getItemNum();
        if (itemNum != null) {
            stmt.bindLong(1, itemNum);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(2, itemName);
        }
 
        String itemSize = entity.getItemSize();
        if (itemSize != null) {
            stmt.bindString(3, itemSize);
        }
 
        String itemLength = entity.getItemLength();
        if (itemLength != null) {
            stmt.bindString(4, itemLength);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
        stmt.bindLong(6, entity.getFlag() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecoderItem readEntity(Cursor cursor, int offset) {
        RecoderItem entity = new RecoderItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // itemNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itemName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemSize
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // itemLength
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.getShort(offset + 5) != 0 // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecoderItem entity, int offset) {
        entity.setItemNum(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemSize(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItemLength(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlag(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecoderItem entity, long rowId) {
        entity.setItemNum(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecoderItem entity) {
        if(entity != null) {
            return entity.getItemNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecoderItem entity) {
        return entity.getItemNum() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
